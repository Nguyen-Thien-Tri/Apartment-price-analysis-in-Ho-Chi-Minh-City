# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10LT7A35RjiOFAl1l0g0z7iDNc1xgcf8d
"""

import pandas as pd
from sklearn.cluster import DBSCAN
import matplotlib.pyplot as plt

# Read data from Excel file
file_path = "Data for Regression model - TP.HCM - v3.xlsx"
df = pd.read_excel(file_path)

for i in range(10):
  df = df.drop(index = df['ad_price'].idxmax())

for i in range(300):
  df = df.drop(index = df['ad_price'].idxmin())

for i in range(2):
  df = df.drop(index = df['ad_size'].idxmax())

for i in range(1500):
  df = df.drop(index = df['ad_size'].idxmin())

for i in range(1):
  df = df.drop(index = df['ad_floornumber'].idxmax())


# df['ad_price'] = df['ad_price']/1e8
df = df.sample(2000, random_state=42)

# Select numerical columns for clustering
# numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
data_for_clustering = df[['ad_price', 'ad_rooms', 'ad_size']]

# Perform DBSCAN clustering
dbscan = DBSCAN(eps=10, min_samples=10)  # You may need to adjust these parameters based on your data
df['cluster'] = dbscan.fit_predict(data_for_clustering)

# Visualize data in 2D with ad_price and ad_size
plt.figure(figsize=(10, 8))

# Plot data points with different colors for each cluster
unique_clusters = df['cluster'].unique()
for cluster in unique_clusters:
    if cluster == -1:
        # Plot outliers in black
        plt.scatter(
            df.loc[df['cluster'] == cluster, 'ad_size'],
            df.loc[df['cluster'] == cluster, 'ad_price'],
            c='black', label='Outliers', s=3
        )
    else:
        # Plot regular clusters with different colors
        plt.scatter(
            df.loc[df['cluster'] == cluster, 'ad_size'],
            df.loc[df['cluster'] == cluster, 'ad_price'],
            label=f'Cluster {cluster}', s=3
        )

plt.xlabel('ad_size')
plt.ylabel('ad_price')
plt.title('DBSCAN Clustering of ad_price and ad_size')
plt.legend()
plt.show()
